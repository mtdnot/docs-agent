short_path:src/components/agent/use/AgentChat.tsx
short_path:src/components/mcp/server/DiscoverWrapper.tsx
short_path:src/components/Home.tsx
short_path:src/components/agent/use/AgentSettings.tsx
short_path:src/components/agent/use/AgentUse.tsx
short_path:src/components/agent/use/DeployedAgents.tsx
short_path:src/components/layout/PageLayout.tsx
short_path:src/components/mcp/rules/Rules.tsx
short_path:src/components/agent/build/AgentCreate.tsx
short_path:src/components/agent/build/AgentBuild.tsx
short_path:src/components/mcp/apps/McpAppsManager.tsx
short_path:src/components/App.tsx
short_path:src/components/agent/AgentAuthGuard.tsx
short_path:src/components/mcp/log/LogViewer.tsx
Number of page_docs: 7
/home/ubuntu/project/main_rag_writer.py:90: LangChainDeprecationWarning: The class `Chroma` was deprecated in LangChain 0.2.9 and will be removed in 1.0. An updated version of the class exists in the :class:`~langchain-chroma package and should be used instead. To use it run `pip install -U :class:`~langchain-chroma` and import as `from :class:`~langchain_chroma import Chroma``.
  vectordb = Chroma(
[Document(metadata={'path': 'src/components/mcp/log/LogViewer.tsx'}, page_content="import React, { useEffect, useState, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { RequestLogEntry } from '../../../lib/types/log-types';\nimport { useFilterState } from './hooks/useFilterState';\nimport { useRequestLogs } from './hooks/useRequestLogs';\nimport LogTable from './components/LogTable';\nimport LogDetailModal from './components/LogDetailModal';\nimport ToolCallTimeline from './components/ToolCallTimeline';\nimport { Card } from '@/components/ui/card';\n\ninterface LogViewerProps {\n  serverId?: string; // 特定のサーバのみ表示する場合は指定、なければすべてのサーバ\n  initialLimit?: number;\n}"), Document(metadata={'path': 'src/components/mcp/log/LogViewer.tsx'}, page_content='const LogViewer: React.FC<LogViewerProps> = ({ serverId, initialLimit = 50 }) => {\n  const { t } = useTranslation();\n  // Filter state management\n  const {\n    filters,\n    setShowFilters,\n    setDateRange,\n    setRequestType,\n    setResponseStatus,\n    setPagination,\n    clearFilters,\n    refresh\n  } = useFilterState({\n    limit: initialLimit,\n  });'), Document(metadata={'path': 'src/components/mcp/log/LogViewer.tsx'}, page_content='// Request log data\n  const {\n    logs,\n    total,\n    loading,\n    fetchLogs\n  } = useRequestLogs({\n    serverId: serverId,\n    clientId: filters.selectedClientId,\n    startDate: filters.startDate,\n    endDate: filters.endDate,\n    requestType: filters.requestType,\n    responseStatus: filters.responseStatus,\n    offset: filters.offset,\n    limit: filters.limit,\n    refreshTrigger: filters.refreshTrigger, // Add refreshTrigger to dependencies\n  });\n\n  // State for selected log, available request types, background refresh, and data tracking\n  const [selectedLog, setSelectedLog] = useState<RequestLogEntry | null>(null);\n  const [lastDataUpdate, setLastDataUpdate] = useState<Date>(new Date());'), Document(metadata={'path': 'src/components/mcp/log/LogViewer.tsx'}, page_content='// Button to manually refresh data\n  const handleManualRefresh = useCallback(() => {\n    // Update the last refresh time indicator\n    setLastDataUpdate(new Date());\n    // Trigger data refresh by incrementing the refreshTrigger counter\n    refresh();\n  }, [refresh]);\n  \n  // Update last refresh time whenever logs change\n  useEffect(() => {\n    if (logs && logs.length > 0) {\n      setLastDataUpdate(new Date());\n    }\n  }, [logs]);\n\n\n  return (\n    <div className="p-4 flex flex-col h-full">'), Document(metadata={'path': 'src/components/mcp/log/LogViewer.tsx'}, page_content='return (\n    <div className="p-4 flex flex-col h-full">\n\n      {/* Status indicator showing last refresh time with refresh button */}\n      <div className="flex justify-end items-center text-sm text-muted-foreground mb-2 gap-2">\n        <button \n          onClick={handleManualRefresh}\n          className="px-2 py-1 bg-primary/10 hover:bg-primary/20 rounded text-primary text-xs transition-colors"\n          aria-label={t(\'logs.viewer.refresh\')}\n        >\n          {t(\'logs.viewer.refresh\')}\n        </button>\n        <span>{t(\'logs.viewer.lastUpdated\')}: {lastDataUpdate.toLocaleTimeString()}</span>\n      </div>'), Document(metadata={'path': 'src/components/mcp/log/LogViewer.tsx'}, page_content='{total === 0 ? (\n        <div className="flex-1 flex items-center justify-center">\n          <Card className="p-8 max-w-2xl w-full shadow-lg text-center">\n            <Link to="/discover" className="px-6 py-3 rounded-md font-medium text-primary inline-block">\n              <h2 className="text-2xl font-bold mb-4">{t(\'home.discovery.title\')}</h2>\n              <p className="mb-6">{t(\'home.discovery.description\')}</p>\n            </Link>\n          </Card>\n        </div>\n      ) : (\n        <div className="flex flex-col space-y-6">\n          {/* Tool call timeline */}\n          <ToolCallTimeline\n            logs={logs}\n            loading={loading}\n            onSelectLog={setSelectedLog}\n          />'), Document(metadata={'path': 'src/components/mcp/log/LogViewer.tsx'}, page_content='{/* Request log table */}\n          <LogTable\n            logs={logs}\n            total={total}\n            loading={loading}\n            offset={filters.offset}\n            limit={filters.limit}\n            onSelectLog={setSelectedLog}\n            onPageChange={(newOffset) => setPagination(newOffset)}\n            onLimitChange={(newLimit) => setPagination(filters.offset, newLimit)}\n          />\n        </div>\n      )}\n\n      {/* Log detail modal */}\n      {selectedLog && (\n        <LogDetailModal\n          log={selectedLog}\n          onClose={() => setSelectedLog(null)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default LogViewer;')]
file:LogViewer
